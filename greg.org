#+TITLE: Emacs Configuration
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org

* Emacs configuration
   My old emacs config files were a pain in the ass to peruse. Org is a nicer
   way to keep things organized.  I can keep a long config file in outline
   form for readability. This emacs config file is hosted on Github [fn:1]

** TODOs
- Setup Org-mode
- Fix key binding issue with Ace jump mode and org mode

** Packages I have installed
   - Ace jump mode [fn:2]
   - Company
   - Deft [fn:3]
   - Elpy
   - Markdown [fn:4]
   - Org-bullets [fn:5]
   - Org-mode
   - Paredit
   - PHP-mode
   - Pyenv-mode [fn:6]
   - Solarized
   - Virtualenvwrapper
   - Zenburn
   - Exec-path-from-shell [fn:8]

** Setup package manager for emacs modes.
   After looking at the options I'm using Marmalade.  I don't want to be using
   bleeding edge which it seems MELPA uses since it links directly the git repos.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (require 'package)
   ;; Add the original Emacs Lisp Package Archive
   (add-to-list 'package-archives
                '("elpa" . "http://tromey.com/elpa/"))
   ;; Add the user-contributed repository
   (add-to-list 'package-archives
                '("marmalade" . "http://marmalade-repo.org/packages/"))
   (add-to-list 'package-archives
            '("melpa" . "http://melpa.milkbox.net/packages/"))
   #+end_src

** Set the theme and consider the custom theme safe.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (package-initialize)
   (load-theme 'solarized-dark t)
   #+end_src

** Backups in the current directory are annoying.
   Let's move those to a central location.  I'm not worried about disk space here.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   (setq delete-old-versions -1)
   (setq version-control t)
   (setq vc-make-backup-files t)
   (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
   #+end_src

** Windows Configuration
   Hide things when emacs starts up, namely the tooltips, toolbar dn scrollbar.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (when window-system
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode 1)
     (scroll-bar-mode -1))
   #+end_src

** Basics and general settings
   Show line number in the left gutter and highlight current line
   Set default tabs to 4.  Highlight line.  There are a number of
   packages for highlighting the current line but hi-line is already
   included and works fine.  No more cruft than needed.
   Mark the column at 80 for python.

   #+BEGIN_SRC emacs-lisp :tangle yes
   ; Set line numbers
   (global-linum-mode 1)

   ; i hate tabs
   (setq-default indent-tabs-mode nil)

   ; default fill column
   (setq-default fill-column 80)

   ; column numbers
   (setq column-number-mode  t)

   ; highlight current line
   (global-hl-line-mode 1)

   ; default tab width
   (setq-default default-tab-width 4)

   ; show lines that are longer than 79 columns
   (require 'whitespace)
   (setq whitespace-style '(face empty tabs lines-tail trailing))
   (global-whitespace-mode t)

   ; dont friggin beep at me!
   (setq ring-bell-function (lambda ()))

   ; dont show startup screen
   ;(setq inhibit-startup-screen t
   ;      initial-major-mode 'fundamental-mode)

   ; confirm when killing emacs.
   (when (window-system)
     (setq confirm-kill-emacs 'yes-or-no-p))

   ; only type y instead of yes
   (fset 'yes-or-no-p 'y-or-n-p)

   ; require a new line at the end of files
   (setq require-final-newline t)

   ; Uniquify buffers, using angle brackets, so you get foo and foo<2>:
   (require 'uniquify)
   (setq uniquify-buffer-name-style 'post-forward-angle-brackets)

   ; auto-save buffer state
   (desktop-save-mode 1)
   (setq desktop-load-locked-desktop t)


   ; use Ubuntu mono
   (set-frame-font "Ubuntu Mono 12")

   ; increase the line spacing
   (setq-default line-spacing 5)
   #+end_src

** Frame location
   I hate that emacs opens at the top left of my screen and a tiny
   frame.  SEt a default width, height and location

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq initial-frame-alist '((top . 30)
                               (left . 30)
                               (width . 180)
                               (height . 60)))
   #+end_src

** Python / Elpy
   Starting with just Elpy.  As I feel I need to replicate the setup
   I had with WingIDE I'll modify this.  I tried to setup Anaconda but there's
   inherent problems with my El Capitan homebrew setup of python and pip that
   prevents it from running in the Emacs GUI.  It works fine in terminal.  Trying
   out Elpy to see if that has issues.  I love the fact that Elpy is on
   readthedocs.org!!
   - Documentation: http://elpy.readthedocs.org/en/latest/ide.html

   When starting emacs gui, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (exec-path-from-shell-initialize)
   #+end_src

   I'm using pyenv and pyenv-virtualenv for managing python version
   #+BEGIN_SRC emacs-lisp :tangle yes
   (pyenv-mode)
   #+end_src

   When opening a python file, look for a .python-version file and activate
   the virtualenv. [fn:7]
   #+BEGIN_SRC emacs-lisp :tangle yes
   (defun ssbb-pyenv-hook ()
   "Automatically activates pyenv version if .python-version file exists."
   (f-traverse-upwards
   (lambda (path)
     (let ((pyenv-version-path (f-expand ".python-version" path)))
       (if (f-exists? pyenv-version-path)
           (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

   (add-hook 'find-file-hook 'ssbb-pyenv-hook)
   #+end_src

   #+BEGIN_SRC emacs-lisp :tangle yes
   ; I'm using pyenv python so add shims path to exec-path
   ; (add-to-list 'exec-path "~/.pyenv/shims")

   (package-initialize)
   (elpy-enable)

   ; Debugging flymake
   ; (setq flymake-log-level 3)

   ; Use Jedi instead of buggy Rope
   (setq elpy-rpc-backend "jedi")
   ; (setq python-check-command (expand-file-name "/Users/greg/.pyenv/shims/flake8"))
   ; (setq python-check-command "flake8")

   ; cleanup whitespace on save.  This is run as a before-save-hook
   ; because it would throw flake8 errors on after-save-hook
   (add-hook 'before-save-hook 'whitespace-cleanup)
   #+end_src

** IDO & iMenu
   Because it saves time

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; IDO rules
   (require 'ido)
   (ido-mode t)
   (setq ido-enable-flex-matching t)
   #+end_src

   # Symbol list using ido-imenu
   #+BEGIN_SRC emacs-lisp :tangle yes
   (defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))

    (global-set-key (kbd "C-x C-i") 'ido-goto-symbol)

    #+end_src

** Ace Jump Mode

   #+BEGIN_SRC emacs-lisp :tangle yes

   (require 'ace-jump-mode)
   (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)

   #+end_src

** Deft
   I use nValt constantly for taking notes and use Notesy on the iPhone for reading
   or doing small edits.  I'm going to try using Deft to connect to those notes and
   write them in org format.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (require 'deft)
   (setq deft-extensions '("org" "txt"))
   (setq deft-directory "~/Dropbox/notesy")
   (setq deft-text-mode 'org-mode)
   (setq deft-use-filename-as-title t)
   (global-set-key [f1] 'deft)
   #+end_src

** Reverting buffers
   Very useful if dealing with git repos and also files that can change from nValt

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-auto-revert-mode t)
   #+end_src

** Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; saveplace remembers your location in a file when saving files
   (setq save-place-file (concat user-emacs-directory "saveplace"))
   ;; activate it for all buffers
   (setq-default save-place t)
   (require 'saveplace)
   #+end_src

** Remember recent files

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; save recent files
   (setq recentf-save-file (concat user-emacs-directory "recentf")
         recentf-max-saved-items 200
         recentf-max-menu-items 15)
   (recentf-mode t)
   #+end_src

** Server-mode
   Emacs has this really interesting feature called server-mode. Emacs is
   notoriously slow to start (this happens if you have a giant emacs config that
   does stupid things). To combat this, you can start a single server process
   which will accept multiple clients. The server maintains the state of
   everything (files open, variables defined, processes running) and your client
   can attach / disconnect as necessary. (yanked from Justin Abrahms, thanks)

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;(if (not server-mode)
   ;    (server-start nil t))
   #+end_src

** iBuffer-mode
   I used this in the past minimally.  Need to work with it more extensively

   #+Begin_SRC emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)

   (setq ibuffer-saved-filter-groups
     (quote (("default"
            ("Org" ;; all org-related buffers
                 (mode . org-mode))
            ("Programming" ;; prog stuff
              (or
                (mode . python-mode)
                (mode . emacs-lisp-mode)
                ))))))

   (add-hook 'ibuffer-mode-hook
     (lambda ()
       (ibuffer-switch-to-saved-filter-groups "default")))
   #+end_src

** elisp
   Configuration for elisp programming.

   Turn on paredit and eldoc when possible. Very useful.

   #+BEGIN_SRC emacs-lisp tangle: yes
   (require 'paredit)
   (require 'eldoc)
       (eldoc-add-command
        'paredit-backward-delete
        'paredit-close-round)

   (defun my/turn-on-paredit-and-eldoc ()
     (interactive)
     (paredit-mode 1)
     (eldoc-mode 1))

   (add-hook 'emacs-lisp-mode-hook #'my/turn-on-paredit-and-eldoc)
   (add-hook 'ielm-mode-hook #'my/turn-on-paredit-and-eldoc)
   #+end_src

** Org-mode
   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.  I also work on these notes in nvAlt from multiple macs so I have
   set txt files to open as org.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; activate debugging
   (setq debug-on-error t
         debug-on-signal nil
         debug-on-quit nil)

   (add-to-list 'load-path "~/dev/personal/org-mode/contrib/lisp" t)
   #+end_src

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;;OPEN ALL TXT FILES IN ORGMODE
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   #+end_src

   Org-mode is ugly with all the leading stars.  I'm going to turn those off
   and use org-bullets for a much cleaner presentation.
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; hide leading stars
   (setq org-hide-leading-stars t)

   ;; use org-bullets for a cleaner view
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

   #+end_src

** Markdown

   #+BEGIN_SRC emacs-lisp :tangle yes
   (autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
   (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
   (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
   #+end_src

** Flyspell
  #+BEGIN_SRC emacs-lisp :tangle yes
   (add-hook 'python-mode-hook
          (lambda ()
            (flyspell-prog-mode)
          ))
   (add-hook 'org-mode-hook 'turn-on-flyspell)
   #+end_src
* Footnotes

[fn:1] https://github.com/gregnewman/emacs-config

[fn:2] https://github.com/winterTTr/ace-jump-mode

[fn:3] [[http://jblevins.org/projects/deft/]]

[fn:4] http://jblevins.org/projects/markdown-mode/

[fn:5] https://github.com/sabof/org-bullets

[fn:6] https://github.com/proofit404/pyenv-mode

[fn:7] http://ssbb.me/emacs-pyenv-auto-activation-en.html

[fn:8] https://github.com/purcell/exec-path-from-shell
